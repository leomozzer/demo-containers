parameters:
  - name: out_file
  - name: input_vars
  - name: include_root_rolder
  - name: work_dir
  - name : archive_type
  - name: output_file
  - name: artifact_name
  - name: depends_on
    default: []

jobs:
  - job: 'Terraform'
    dependsOn: ${{ parameters.depends_on }}
    condition: always()
    pool:
      vmImage: ubuntu-latest

    steps:

      - task: DownloadBuildArtifacts@0
        displayName: 'Get tfstate files'
        continueOnError: true
        inputs:
          buildType: 'current'
          downloadType: 'single'
          artifactName: ${{ parameters.artifact_name }}
          downloadPath: '$(System.ArtifactsDirectory)'

      - task: CopyFiles@2
        displayName: 'Move tfstate files'
        continueOnError: true
        inputs:
          SourceFolder: '$(System.ArtifactsDirectory)/${{ parameters.artifact_name }}'
          Contents: |
            terraform.tfstate
          TargetFolder: '$(System.DefaultWorkingDirectory)/${{ parameters.work_dir }}'

      - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
        displayName: 'Install Terraform'
        continueOnError: true
        inputs:
          terraformVersion: 0.14.7

      - task: Bash@3
        displayName: 'Terraform init'
        inputs:
          targetType: 'inline'
          script: |
            terraform init
          workingDirectory: '$(System.DefaultWorkingDirectory)/${{ parameters.work_dir }}'

      - task: Bash@3
        displayName: 'Terraform check format'
        inputs:
          targetType: 'inline'
          script: |
            terraform fmt -check -recursive -diff
          workingDirectory: '$(System.DefaultWorkingDirectory)/${{ parameters.work_dir }}'

      - task: Bash@3
        displayName: 'Terraform plan'
        inputs:
          targetType: 'inline'
          script: |
            terraform plan -out=${{ parameters.out_file }}.plan -input=false ${{ parameters.input_vars }}
          workingDirectory: '$(System.DefaultWorkingDirectory)/${{ parameters.work_dir }}'

      - task: Bash@3
        displayName: 'Terraform Apply'
        inputs:
          targetType: 'inline'
          script: |
            terraform apply -auto-approve -lock-timeout=10m ${{ parameters.out_file }}.plan
          workingDirectory: '$(System.DefaultWorkingDirectory)/${{ parameters.work_dir }}'

      - task: CopyFiles@2
        inputs:
          SourceFolder: '$(System.DefaultWorkingDirectory)/${{ parameters.work_dir }}'
          Contents: |
            terraform.tfstate
          TargetFolder: '$(Build.ArtifactStagingDirectory)'

      - task: PublishBuildArtifacts@1
        inputs:
          pathToPublish: '$(Build.ArtifactStagingDirectory)'
          artifactName: ${{ parameters.artifact_name }}