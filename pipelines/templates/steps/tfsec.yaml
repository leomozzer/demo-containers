# Leave parameters empty. Will be filled by terraform-pipeline.yaml
parameters:
  - name: artifact_name
    default: "TFSecReport"
    type: string
  - name: working_path
    default: "$(System.DefaultWorkingDirectory)"
    type: string
  - name: tag
    default: "latest"
    type: string

steps:
  # TFSec uses static analysis of Terraform templates to spot potential security issues, and 
  # checks for violations of AWS, Azure and GCP security best practice recommendations.
  # NOTE: To disable a specific check from analysis, include it in the command-line as 
  # follows: -e GEN001,GCP001,GCP002
  # Documentation: https://github.com/aquasecurity/tfsec
  - bash: |
      mkdir TFSecReport
      docker pull aquasec/tfsec:${{ parameters.tag }}
      docker run --rm -v ${{ parameters.working_path }}:/src aquasec/tfsec ./src --format JUnit > $(System.DefaultWorkingDirectory)/TFSecReport/TFSec-Report.xml
      docker run --rm -v ${{ parameters.working_path }}:/src aquasec/tfsec ./src
    displayName: TFSec Static Code Analysis
    name: TFSecScan
    condition: always()
  # Publish the TFSec report as an artifact to Azure Pipelines
  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifact: TFSec Report'
    condition: succeededOrFailed()
    inputs:
      PathtoPublish: '$(System.DefaultWorkingDirectory)/TFSecReport'
      ArtifactName: TFSecReport-${{ parameters.artifact_name }}

  # Publish the results of the TFSec analysis as Test Results to the pipeline
  - task: PublishTestResults@2
    displayName: Publish TFSecReport Test Results
    condition: succeededOrFailed()
    inputs:
      testResultsFormat: 'JUnit' # Options JUnit, NUnit, VSTest, xUnit, cTest
      testResultsFiles: '**/*TFSec-Report.xml'
      searchFolder: '$(System.DefaultWorkingDirectory)/TFSecReport'
      testRunTitle: TFSec Scan
      mergeTestResults: false
      failTaskOnFailedTests: false
      publishRunAttachments: true

    # Clean up any of the containers / images that were used for quality checks
  - bash: |
      docker rmi "aquasec/tfsec:${{ parameters.tag }}" -f | true
    displayName: 'Remove Terraform Quality Check Docker Images'
    condition: always()
