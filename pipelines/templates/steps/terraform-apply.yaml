# Leave parameters empty. Will be filled by terraform-pipeline.yaml
parameters:
  stage: ""
  tfstate_storage_account_resource_group_name: ""
  tfstate_storage_account_name: ""
  tf_version: ""
  service_connection_name: ""
  project_name: ""
  working_path: ""
  tfstate_file_name: ""
  var_file: ""
  

steps:
  - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
    displayName: "Install Terraform ${{ parameters.tf_version }}"
    inputs:
      terraformVersion: ${{ parameters.tf_version }}

  - powershell: New-Item -Path "${{ parameters.working_path }}" -Name "backend.tf" -Value "terraform {`r`nbackend `"azurerm`" {}`r`n}"
    displayName: "Create backend.tf"

  - powershell: New-Item -Path "${{ parameters.working_path }}" -Name "azurerm_provider.tf" -Value "provider `"azurerm`"{`r`nskip_provider_registration = true`r`nfeatures {}`r`n}"
    displayName: "Create azurerm_provider.tf"

  - task: TerraformTaskV2@2
    displayName: "Terraform Init ${{ parameters.stage }}"
    inputs:
      provider: "azurerm"
      command: "init"
      workingDirectory: '${{ parameters.working_path }}'
      backendServiceArm: ${{ parameters.service_connection_name }}
      backendAzureRmResourceGroupName: ${{ parameters.tfstate_storage_account_resource_group_name }}
      backendAzureRmStorageAccountName: ${{ parameters.tfstate_storage_account_name }}
      backendAzureRmContainerName: states
      backendAzureRmKey: "${{ parameters.tfstate_file_name }}"

  # - task: AzureCLI@2
  #   displayName: Copy ${{ parameters.stage }} terraform-live folder from Storage
  #   inputs:
  #     azureSubscription: ${{ parameters.service_connection_name }}
  #     scriptType: bash
  #     scriptLocation: inlineScript
  #     inlineScript: |
  #       mkdir ${{ parameters.working_path }}
  #       az storage blob download \
  #         --file terraform-live.tar \
  #         --name "$(Build.BuildNumber)-live-${{ parameters.stage }}.tar" \
  #         --account-name "${{ parameters.tfstate_storage_account_name }}" \
  #         --container-name plans
  #       tar -xvf terraform-live.tar -C ${{ parameters.working_path }}

  # - task: AzureCLI@2
  #   displayName: Copy ${{ parameters.stage }} terraform-modules folder from Storage
  #   inputs:
  #     azureSubscription: ${{ parameters.service_connection_name }}
  #     scriptType: bash
  #     scriptLocation: inlineScript
  #     inlineScript: |
  #       mkdir terraform-modules
  #       az storage blob download \
  #         --file terraform-modules.tar \
  #         --name "$(Build.BuildNumber)-modules-${{ parameters.stage }}.tar" \
  #         --account-name "${{ parameters.tfstate_storage_account_name }}" \
  #         --container-name plans
  #       tar -xvf terraform-modules.tar -C terraform-modules

  - task: TerraformTaskV2@2
    displayName: 'Terraform Apply ${{ parameters.stage }}'
    inputs:
      command: apply
      commandOptions: '-lock-timeout=10m -var-file="${{ parameters.var_file }}" -input=false -auto-approve'
      environmentServiceNameAzureRM: ${{ parameters.service_connection_name }}
      workingDirectory: ${{ parameters.working_path }}
