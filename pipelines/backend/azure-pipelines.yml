trigger:
  batch: true
  branches:
    include:
    - main
  paths:
    exclude: 
    - README.md
    - LICENSE
    - 'terraform/backend/.gitignore'
    include:
    - terraform/backend
    - pipelines/backend/azure-pipelines.yml

parameters:
  - name: backendDir
    default: "$(System.DefaultWorkingDirectory)/terraform/backend"
  - name: app_name
    default: "demo-containers"

variables:
  - group: "demo-containers-group"

pool:
  vmImage: ubuntu-latest

stages:
  - stage: QualityCheckStage
    displayName: Quality Check Stage
    jobs:
      - job: TFSecJobMain
        displayName: TFSec Scan terraform-main
        steps:
          - template: ../templates/steps/tfsec.yaml
            parameters:
              artifact_name: 'terraform-backend'
              working_path: ${{ parameters.backendDir }}

  - stage: dev
    jobs:

    - job: 'ACR_Setup'
      steps:
      - task: InfracostSetup@1
        inputs:
          apiKey: '$(INFRACOST-KEY)'
          version: '0.10.x'
          
      - template: ../templates/storage-account/download.yml
        parameters:        
          file_name: 'tf-acr-$(System.StageName).tar'
          storage_account_name: '$(STORAGE-ACCOUNT-NAME)'
          container_name: '$(STORAGE-ACCOUNT-CONTAINER)'
          working_dir: ${{ parameters.backendDir }}
          azure_subscription: 'SC-AzureDevOps'

      - task: ExtractFiles@1
        continueOnError: true
        inputs:
          archiveFilePatterns: '$(System.DefaultWorkingDirectory)/${{ parameters.backendDir }}/tf-acr-$(System.StageName).tar'
          destinationFolder: '$(System.DefaultWorkingDirectory)/${{ parameters.backendDir }}'
          cleanDestinationFolder: false
      
      - template: ../templates/steps/terraform.yml
        parameters:
          out_file: "acr-$(System.StageName)"
          input_vars:  '-var "app_name=${{ parameters.app_name }}" -var "environment=$(System.StageName)" -var "subscription_id=$(SUBSCRIPTION-ID)" -var "client_id=$(CLIENT-ID)" -var "client_secret=$(CLIENT-SECRET)" -var "tenant_id=$(TENANT-ID)"'
          work_dir: ${{ parameters.backendDir }}
          terraformVersion: 0.14.7

      - task: ArchiveFiles@2
        inputs:
          rootFolderOrFile: ${{ parameters.backendDir }}/terraform.tfstate
          archiveType: 'tar'
          archiveFile: ${{ parameters.backendDir }}/tf-acr-$(System.StageName).tar
          replaceExistingArchive: true
          includeRootFolder: false

      - template: ../templates/storage-account/upload.yml
        parameters:
          file_name: 'tf-acr-$(System.StageName).tar'
          working_dir: ${{ parameters.backendDir }}
          storage_account_name: '$(STORAGE-ACCOUNT-NAME)'
          container_name: '$(STORAGE-ACCOUNT-CONTAINER)'
          azure_subscription: 'SC-AzureDevOps'