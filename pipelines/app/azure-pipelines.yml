trigger:
  batch: true
  branches:
    include:
    - main
  paths:
    exclude: 
    - README.md
    - LICENSE
    include:
    - api
    - website
    - pipelines/app/azure-pipelines.yml

parameters:
  - name: azureContainerRegistry
    default: xeqscruacr.azurecr.io
  - name: azureSubscriptionEndpoint
    default: AzureDevOps
  - name: dockerComposeFile
    default: api/docker-compose.yml
  - name: projectName
    default: api
  - name: qualifyImageNames
    default: true
  - name: databaseDir
    default: "terraform/database"

variables:
  - group: "demo-containers-group"
  - group: "demo-containers-acr-group"

pool:
  vmImage: ubuntu-latest

stages:
  - stage: main
    jobs:
    - job: MySql
      steps:
      - task: DockerCompose@0
        displayName: Build services
        inputs:
          action: Build services
          azureSubscriptionEndpoint: ${{ parameters.azureSubscriptionEndpoint }}
          azureContainerRegistry: ${{ parameters.azureContainerRegistry }}
          dockerComposeFile: db/docker-compose.yml
          projectName: mysql
          qualifyImageNames: ${{ parameters.qualifyImageNames }}
          
      - task: DockerCompose@0
        displayName: Push services
        inputs:
          action: Push services
          containerregistrytype: Azure Container Registry
          azureSubscriptionEndpoint: ${{ parameters.azureSubscriptionEndpoint }}
          azureContainerRegistry: ${{ parameters.azureContainerRegistry }}
          dockerComposeFile: db/docker-compose.yml
          projectName: mysql
          qualifyImageNames: ${{ parameters.qualifyImageNames }}

      - template: ../templates/steps/terraform.yml
        parameters:
          out_file: "main"
          input_vars:  '-var "app_name=${{ parameters.app_name }}" -var "subscription_id=$(SUBSCRIPTION-ID)" -var "client_id=$(CLIENT-ID)" -var "client_secret=$(CLIENT-SECRET)" -var "tenant_id=$(TENANT-ID)"'
          include_root_rolder: true
          work_dir: ${{ parameters.backendDir }}
          archive_type: 'tar'
          output_file: 'tf-backend'
          artifact_name: 'tfstates'
          depends_on: 'DownloadFile'
    # - template: ../templates/docker-compose/build-push.yml
    #   parameters:        
    #     azureSubscriptionEndpoint: ${{ parameters.azureSubscriptionEndpoint }}
    #     azureContainerRegistry: ${{ parameters.azureContainerRegistry }}
    #     dockerComposeFile: db/docker-compose.yml
    #     projectName: mysql
    #     qualifyImageNames: true
    #     jobName: MySqlDockerCompose

    - job: NodeJS
      dependsOn: MySql
      steps:

      - task: DockerCompose@0
        displayName: Build services
        inputs:
          action: Build services
          azureSubscriptionEndpoint: ${{ parameters.azureSubscriptionEndpoint }}
          azureContainerRegistry: ${{ parameters.azureContainerRegistry }}
          dockerComposeFile: api/docker-compose.yml
          projectName: api
          qualifyImageNames: ${{ parameters.qualifyImageNames }}
          dockerComposeFileArgs: |
            MYSQL_HOST=""
            MYSQL_PORT=3306
          
      - task: DockerCompose@0
        displayName: Push services
        inputs:
          action: Push services
          containerregistrytype: Azure Container Registry
          azureSubscriptionEndpoint: ${{ parameters.azureSubscriptionEndpoint }}
          azureContainerRegistry: ${{ parameters.azureContainerRegistry }}
          dockerComposeFile: api/docker-compose.yml
          projectName: api
          qualifyImageNames: ${{ parameters.qualifyImageNames }}
          dockerComposeFileArgs: |
            MYSQL_HOST="20.123.233.107"
            MYSQL_PORT=3306
