trigger:
  batch: true
  branches:
    include:
    - main
  paths:
    exclude: 
    - README.md
    - LICENSE
    include:
    - api
    - website
    - pipelines/app/azure-pipelines.yml

parameters:
  - name: app_name
    default: "demo-containers"
  - name: azureSubscriptionEndpoint
    default: AzureDevOps
  - name: qualifyImageNames
    default: true
  - name: databaseDir
    default: "terraform/app/database"
  - name: apiDir
    default: "terraform/app/api"

variables:
  - group: "demo-containers-group"
  - group: "demo-containers-acr-group"

pool:
  vmImage: ubuntu-latest

stages:
  - stage: dev
    jobs:
    - job: MySql
      steps:
        
      - task: DockerCompose@0
        displayName: Build services
        inputs:
          action: Build services
          azureSubscriptionEndpoint: ${{ parameters.azureSubscriptionEndpoint }}
          azureContainerRegistry: '$(acr-name).azurecr.io'
          dockerComposeFile: db/docker-compose.yml
          projectName: mysql-$(System.StageName)
          qualifyImageNames: ${{ parameters.qualifyImageNames }}
          
      - task: DockerCompose@0
        displayName: Push services
        inputs:
          action: Push services
          containerregistrytype: Azure Container Registry
          azureSubscriptionEndpoint: ${{ parameters.azureSubscriptionEndpoint }}
          azureContainerRegistry: '$(acr-name).azurecr.io'
          dockerComposeFile: db/docker-compose.yml
          projectName: mysql-$(System.StageName)
          qualifyImageNames: ${{ parameters.qualifyImageNames }}

      - template: ../templates/storage-account/download.yml
        parameters:        
          file_name: 'tf-database-$(System.StageName).tar'
          storage_account_name: '$(STORAGE-ACCOUNT-NAME)'
          container_name: '$(STORAGE-ACCOUNT-CONTAINER)'
          working_dir: '$(System.DefaultWorkingDirectory)/${{ parameters.databaseDir }}'

      - task: ExtractFiles@1
        continueOnError: true
        inputs:
          archiveFilePatterns: '$(System.DefaultWorkingDirectory)/${{ parameters.databaseDir }}/tf-database-$(System.StageName).tar'
          destinationFolder: '$(System.DefaultWorkingDirectory)/${{ parameters.databaseDir }}'
          cleanDestinationFolder: false

      - template: ../templates/steps/terraform.yml
        parameters:
          out_file: "acg-mysql-$(System.StageName)"
          input_vars:  '-var "app_name=${{ parameters.app_name }}-$(acr-name)" -var "environment=$(System.StageName)" -var "subscription_id=$(SUBSCRIPTION-ID)" -var "client_id=$(CLIENT-ID)" -var "client_secret=$(CLIENT-SECRET)" -var "tenant_id=$(TENANT-ID)" -var "acr_username=$(acr-name)" -var "acr_password=$(acr-admin-password)" -var "acr_server=$(acr-name).azurecr.io"'
          work_dir: '$(System.DefaultWorkingDirectory)/${{ parameters.databaseDir }}'
          terraformVersion: 0.14.7

      - task: PowerShell@2
        displayName: 'MySql ip'
        inputs:
          targetType: 'inline'
          script: |
            $data = Get-content $(System.DefaultWorkingDirectory)/${{ parameters.databaseDir }}/output.json | out-string | ConvertFrom-Json
            $ip_address = $data.mysql_ip_address.value
            Write-Host "##vso[task.setvariable variable=ipMysql;]$ip_address"
      
      - task: ArchiveFiles@2
        inputs:
          rootFolderOrFile: ${{ parameters.databaseDir }}/terraform.tfstate
          archiveType: 'tar'
          archiveFile: ${{ parameters.databaseDir }}/tf-database-$(System.StageName).tar
          replaceExistingArchive: true
          includeRootFolder: false

      - template: ../templates/storage-account/upload.yml
        parameters:
          file_name: 'tf-database-$(System.StageName).tar'
          storage_account_name: '$(STORAGE-ACCOUNT-NAME)'
          container_name: '$(STORAGE-ACCOUNT-CONTAINER)'
          working_dir: ${{ parameters.databaseDir }}
      
      - task: CopyFiles@2
        inputs:
          SourceFolder: '$(System.DefaultWorkingDirectory)/${{ parameters.databaseDir }}'
          Contents: |
            output.json
          TargetFolder: '$(Build.ArtifactStagingDirectory)'

      - task: PublishBuildArtifacts@1
        inputs:
          pathToPublish: '$(Build.ArtifactStagingDirectory)'
          artifactName: 'tfstates-database-$(System.StageName)'

    - job: NodeJS
      dependsOn: MySql
      steps:

      - task: DownloadBuildArtifacts@0
        displayName: 'MySql artifacts'
        inputs:
          buildType: 'current'
          downloadType: 'single'
          artifactName: 'tfstates-database-$(System.StageName)'
          downloadPath: '$(System.ArtifactsDirectory)'

      - task: PowerShell@2
        displayName: 'MySql ip'
        inputs:
          targetType: 'inline'
          script: |
            $data = Get-content $(System.ArtifactsDirectory)/tfstates-database-$(System.StageName)/output.json | out-string | ConvertFrom-Json
            $ip_address = $data.mysql_ip_address.value
            Write-Host "##vso[task.setvariable variable=ipMysql;]$ip_address"

      - task: PowerShell@2
        displayName: 'MySql ip'
        inputs:
          targetType: 'inline'
          script: |
            Write-Host "MySql IP: $(ipMysql)"

      - task: DockerCompose@0
        displayName: Build services
        inputs:
          action: Build services
          azureSubscriptionEndpoint: ${{ parameters.azureSubscriptionEndpoint }}
          azureContainerRegistry: '$(acr-name).azurecr.io'
          dockerComposeFile: api/docker-compose.yml
          projectName: api-$(System.StageName)
          qualifyImageNames: ${{ parameters.qualifyImageNames }}
          dockerComposeFileArgs: |
            MYSQL_HOST=$(ipMysql)
            MYSQL_PORT=3306
          
      - task: DockerCompose@0
        displayName: Push services
        inputs:
          action: Push services
          containerregistrytype: Azure Container Registry
          azureSubscriptionEndpoint: ${{ parameters.azureSubscriptionEndpoint }}
          azureContainerRegistry: '$(acr-name).azurecr.io'
          dockerComposeFile: api/docker-compose.yml
          projectName: api-$(System.StageName)
          qualifyImageNames: ${{ parameters.qualifyImageNames }}
          dockerComposeFileArgs: |
            MYSQL_HOST=$(ipMysql)
            MYSQL_PORT=3306

      - template: ../templates/storage-account/download.yml
        parameters:        
          file_name: 'tf-api-$(System.StageName).tar'
          storage_account_name: '$(STORAGE-ACCOUNT-NAME)'
          container_name: '$(STORAGE-ACCOUNT-CONTAINER)'
          working_dir: $(System.DefaultWorkingDirectory)/${{ parameters.apiDir }}

      - task: ExtractFiles@1
        continueOnError: true
        inputs:
          archiveFilePatterns: '$(System.DefaultWorkingDirectory)/${{ parameters.apiDir }}/tf-api-$(System.StageName).tar'
          destinationFolder: $(System.DefaultWorkingDirectory)/${{ parameters.apiDir }}
          cleanDestinationFolder: false

      - template: ../templates/steps/terraform.yml
        parameters:
          out_file: "acg-api-$(System.StageName)"
          input_vars:  '-var "app_name=${{ parameters.app_name }}-$(acr-name)" -var "environment=$(System.StageName)" -var "subscription_id=$(SUBSCRIPTION-ID)" -var "client_id=$(CLIENT-ID)" -var "client_secret=$(CLIENT-SECRET)" -var "tenant_id=$(TENANT-ID)" -var "acr_username=$(acr-name)" -var "acr_password=$(acr-admin-password)" -var "acr_server=$(acr-name).azurecr.io"'
          work_dir: ${{ parameters.apiDir }}
          terraformVersion: 0.14.7

      - task: ArchiveFiles@2
        inputs:
          rootFolderOrFile: ${{ parameters.apiDir }}/terraform.tfstate
          archiveType: 'tar'
          archiveFile: ${{ parameters.apiDir }}/tf-api-$(System.StageName).tar
          replaceExistingArchive: true
          includeRootFolder: false

      - template: ../templates/storage-account/upload.yml
        parameters:
          file_name: 'tf-api-$(System.StageName).tar'
          storage_account_name: '$(STORAGE-ACCOUNT-NAME)'
          container_name: '$(STORAGE-ACCOUNT-CONTAINER)'
          working_dir: ${{ parameters.apiDir }}

      - task: AzureCLI@2
        displayName: 'Restart Container'
        inputs:
          azureSubscription: 'AzureDevOps'
          scriptType: 'pscore'
          scriptLocation: 'inlineScript'
          inlineScript: |
            $data = Get-content ${{ parameters.apiDir }}/output.json | out-string | ConvertFrom-Json
            $rg_name = $data.rg_name.value
            $acg_name = $data.acg_name.value
            az container restart --name $acg_name --resource-group $rg_name
